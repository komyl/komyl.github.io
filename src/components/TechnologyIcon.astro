---
// We import the main library and the specific type for safety
import * as simpleIcons from 'simple-icons/icons';
import type { SimpleIcon } from 'simple-icons';

interface Props {
  name: string;
}
const { name } = Astro.props;

// --- Icon Mapping ---
// This is our reliable, hand-picked list.
// It maps the name you type in the CMS to the *exact* icon object from the library.
const ICONS: Record<string, SimpleIcon> = {
    'typescript': simpleIcons.siTypescript,
    'javascript': simpleIcons.siJavascript,
    'python': simpleIcons.siPython,
    'astro': simpleIcons.siAstro,
    'react': simpleIcons.siReact,
    'rust': simpleIcons.siRust,
    'kotlin': simpleIcons.siKotlin,
    'c++': simpleIcons.siCplusplus,
    '.net': simpleIcons.siDotnet,
    'nodejs': simpleIcons.siNodedotjs,
    'vue': simpleIcons.siVuedotjs,
    'netlify': simpleIcons.siNetlify,
    'github': simpleIcons.siGithub,
    // We can easily add more icons here by following the same pattern.
};

// We directly look up the name in our map.
const icon = ICONS[name.toLowerCase()];
---

{icon ? (
  <div class="tech-icon-wrapper" title={icon.title}>
    <Fragment set:html={icon.svg} />
  </div>
) : (
  <div class="tech-icon-wrapper text-fallback" title={`Icon for ${name} not found`}>
    {name}
  </div>
)}

<style>
  .tech-icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-unit);
    background-color: var(--glass-border);
    border-radius: var(--spacing-unit);
    color: var(--color-text-muted);
    fill: currentColor;
    transition: all 0.2s ease-in-out;
  }
  .tech-icon-wrapper:hover {
    color: var(--color-text);
  }
  /* Style for when the icon is not found, shows the full name */
  .tech-icon-wrapper.text-fallback {
    font-size: 0.8rem;
    font-weight: 500;
    padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
  }
  .tech-icon-wrapper svg {
    width: 18px;
    height: 18px;
  }
</style>