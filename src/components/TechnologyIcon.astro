---
import * as simpleIcons from 'simple-icons/icons';
import type { SimpleIcon } from 'simple-icons';

interface Props {
  name: string;
}
const { name } = Astro.props;

// A reliable mapping from user-friendly names to the exact icon key
const ICONS: Record<string, string> = {
    'typescript': 'siTypescript',
    'javascript': 'siJavascript',
    'python': 'siPython',
    'astro': 'siAstro',
    'react': 'siReact',
    'rust': 'siRust',
    'kotlin': 'siKotlin',
    'c++': 'siCplusplus',
    '.net': 'siDotnet',
    'nodejs': 'siNodedotjs',
    'vue': 'siVuedotjs',
};

const iconKey = ICONS[name.toLowerCase()];
// THE FIX IS HERE: We cast simpleIcons to `any` to bypass the strict index signature check.
// We also explicitly cast the result back to `SimpleIcon | undefined` for type safety afterwards.
const icon: SimpleIcon | undefined = (simpleIcons as any)[iconKey];
---

{icon ? (
  <div class="tech-icon-wrapper" title={icon.title}>
    <Fragment set:html={icon.svg} />
  </div>
) : (
  <div class="tech-icon-wrapper text-fallback" title={name}>
    {name}
  </div>
)}

<style>
  .tech-icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-unit);
    background-color: var(--glass-border);
    border-radius: var(--spacing-unit);
    color: var(--color-text-muted);
    fill: currentColor;
    transition: all 0.2s ease-in-out;
  }
  .tech-icon-wrapper:hover {
    color: var(--color-text);
  }
  .tech-icon-wrapper.text-fallback {
    font-size: 0.8rem;
    font-weight: 500;
    padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
  }
  .tech-icon-wrapper svg {
    width: 18px;
    height: 18px;
  }
</style>